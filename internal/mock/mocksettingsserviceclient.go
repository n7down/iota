// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/settings/settings.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	settings_pb "github.com/n7down/kuiper/internal/pb/settings"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSettingsServiceClient is a mock of SettingsServiceClient interface.
type MockSettingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceClientMockRecorder
}

// MockSettingsServiceClientMockRecorder is the mock recorder for MockSettingsServiceClient.
type MockSettingsServiceClientMockRecorder struct {
	mock *MockSettingsServiceClient
}

// NewMockSettingsServiceClient creates a new mock instance.
func NewMockSettingsServiceClient(ctrl *gomock.Controller) *MockSettingsServiceClient {
	mock := &MockSettingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceClient) EXPECT() *MockSettingsServiceClientMockRecorder {
	return m.recorder
}

// CreateBatCaveSetting mocks base method.
func (m *MockSettingsServiceClient) CreateBatCaveSetting(ctx context.Context, in *settings_pb.CreateBatCaveSettingRequest, opts ...grpc.CallOption) (*settings_pb.CreateBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBatCaveSetting", varargs...)
	ret0, _ := ret[0].(*settings_pb.CreateBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatCaveSetting indicates an expected call of CreateBatCaveSetting.
func (mr *MockSettingsServiceClientMockRecorder) CreateBatCaveSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatCaveSetting", reflect.TypeOf((*MockSettingsServiceClient)(nil).CreateBatCaveSetting), varargs...)
}

// GetBatCaveSetting mocks base method.
func (m *MockSettingsServiceClient) GetBatCaveSetting(ctx context.Context, in *settings_pb.GetBatCaveSettingRequest, opts ...grpc.CallOption) (*settings_pb.GetBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBatCaveSetting", varargs...)
	ret0, _ := ret[0].(*settings_pb.GetBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatCaveSetting indicates an expected call of GetBatCaveSetting.
func (mr *MockSettingsServiceClientMockRecorder) GetBatCaveSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatCaveSetting", reflect.TypeOf((*MockSettingsServiceClient)(nil).GetBatCaveSetting), varargs...)
}

// UpdateBatCaveSetting mocks base method.
func (m *MockSettingsServiceClient) UpdateBatCaveSetting(ctx context.Context, in *settings_pb.UpdateBatCaveSettingRequest, opts ...grpc.CallOption) (*settings_pb.UpdateBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBatCaveSetting", varargs...)
	ret0, _ := ret[0].(*settings_pb.UpdateBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatCaveSetting indicates an expected call of UpdateBatCaveSetting.
func (mr *MockSettingsServiceClientMockRecorder) UpdateBatCaveSetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatCaveSetting", reflect.TypeOf((*MockSettingsServiceClient)(nil).UpdateBatCaveSetting), varargs...)
}

// MockSettingsServiceServer is a mock of SettingsServiceServer interface.
type MockSettingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceServerMockRecorder
}

// MockSettingsServiceServerMockRecorder is the mock recorder for MockSettingsServiceServer.
type MockSettingsServiceServerMockRecorder struct {
	mock *MockSettingsServiceServer
}

// NewMockSettingsServiceServer creates a new mock instance.
func NewMockSettingsServiceServer(ctrl *gomock.Controller) *MockSettingsServiceServer {
	mock := &MockSettingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceServer) EXPECT() *MockSettingsServiceServerMockRecorder {
	return m.recorder
}

// CreateBatCaveSetting mocks base method.
func (m *MockSettingsServiceServer) CreateBatCaveSetting(arg0 context.Context, arg1 *settings_pb.CreateBatCaveSettingRequest) (*settings_pb.CreateBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatCaveSetting", arg0, arg1)
	ret0, _ := ret[0].(*settings_pb.CreateBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatCaveSetting indicates an expected call of CreateBatCaveSetting.
func (mr *MockSettingsServiceServerMockRecorder) CreateBatCaveSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatCaveSetting", reflect.TypeOf((*MockSettingsServiceServer)(nil).CreateBatCaveSetting), arg0, arg1)
}

// GetBatCaveSetting mocks base method.
func (m *MockSettingsServiceServer) GetBatCaveSetting(arg0 context.Context, arg1 *settings_pb.GetBatCaveSettingRequest) (*settings_pb.GetBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatCaveSetting", arg0, arg1)
	ret0, _ := ret[0].(*settings_pb.GetBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatCaveSetting indicates an expected call of GetBatCaveSetting.
func (mr *MockSettingsServiceServerMockRecorder) GetBatCaveSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatCaveSetting", reflect.TypeOf((*MockSettingsServiceServer)(nil).GetBatCaveSetting), arg0, arg1)
}

// UpdateBatCaveSetting mocks base method.
func (m *MockSettingsServiceServer) UpdateBatCaveSetting(arg0 context.Context, arg1 *settings_pb.UpdateBatCaveSettingRequest) (*settings_pb.UpdateBatCaveSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatCaveSetting", arg0, arg1)
	ret0, _ := ret[0].(*settings_pb.UpdateBatCaveSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatCaveSetting indicates an expected call of UpdateBatCaveSetting.
func (mr *MockSettingsServiceServerMockRecorder) UpdateBatCaveSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatCaveSetting", reflect.TypeOf((*MockSettingsServiceServer)(nil).UpdateBatCaveSetting), arg0, arg1)
}

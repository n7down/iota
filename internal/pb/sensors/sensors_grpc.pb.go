// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sensors_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorsServiceClient is the client API for SensorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorsServiceClient interface {
	GetVoltageMeasurements(ctx context.Context, in *GetVoltageMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetVoltageMeasurementsClient, error)
	GetHumidityMeasurements(ctx context.Context, in *GetHumidityMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetHumidityMeasurementsClient, error)
	GetTemperatureMeasurements(ctx context.Context, in *GetTemperatureMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetTemperatureMeasurementsClient, error)
}

type sensorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorsServiceClient(cc grpc.ClientConnInterface) SensorsServiceClient {
	return &sensorsServiceClient{cc}
}

func (c *sensorsServiceClient) GetVoltageMeasurements(ctx context.Context, in *GetVoltageMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetVoltageMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorsService_serviceDesc.Streams[0], "/sensors_pb.SensorsService/GetVoltageMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorsServiceGetVoltageMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SensorsService_GetVoltageMeasurementsClient interface {
	Recv() (*GetVoltageMeasurementsResponse, error)
	grpc.ClientStream
}

type sensorsServiceGetVoltageMeasurementsClient struct {
	grpc.ClientStream
}

func (x *sensorsServiceGetVoltageMeasurementsClient) Recv() (*GetVoltageMeasurementsResponse, error) {
	m := new(GetVoltageMeasurementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensorsServiceClient) GetHumidityMeasurements(ctx context.Context, in *GetHumidityMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetHumidityMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorsService_serviceDesc.Streams[1], "/sensors_pb.SensorsService/GetHumidityMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorsServiceGetHumidityMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SensorsService_GetHumidityMeasurementsClient interface {
	Recv() (*GetHumidityMeasurementsResponse, error)
	grpc.ClientStream
}

type sensorsServiceGetHumidityMeasurementsClient struct {
	grpc.ClientStream
}

func (x *sensorsServiceGetHumidityMeasurementsClient) Recv() (*GetHumidityMeasurementsResponse, error) {
	m := new(GetHumidityMeasurementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensorsServiceClient) GetTemperatureMeasurements(ctx context.Context, in *GetTemperatureMeasurementsRequest, opts ...grpc.CallOption) (SensorsService_GetTemperatureMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorsService_serviceDesc.Streams[2], "/sensors_pb.SensorsService/GetTemperatureMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorsServiceGetTemperatureMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SensorsService_GetTemperatureMeasurementsClient interface {
	Recv() (*GetTemperatureMeasurementsResponse, error)
	grpc.ClientStream
}

type sensorsServiceGetTemperatureMeasurementsClient struct {
	grpc.ClientStream
}

func (x *sensorsServiceGetTemperatureMeasurementsClient) Recv() (*GetTemperatureMeasurementsResponse, error) {
	m := new(GetTemperatureMeasurementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorsServiceServer is the server API for SensorsService service.
// All implementations must embed UnimplementedSensorsServiceServer
// for forward compatibility
type SensorsServiceServer interface {
	GetVoltageMeasurements(*GetVoltageMeasurementsRequest, SensorsService_GetVoltageMeasurementsServer) error
	GetHumidityMeasurements(*GetHumidityMeasurementsRequest, SensorsService_GetHumidityMeasurementsServer) error
	GetTemperatureMeasurements(*GetTemperatureMeasurementsRequest, SensorsService_GetTemperatureMeasurementsServer) error
	mustEmbedUnimplementedSensorsServiceServer()
}

// UnimplementedSensorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorsServiceServer struct {
}

func (*UnimplementedSensorsServiceServer) GetVoltageMeasurements(*GetVoltageMeasurementsRequest, SensorsService_GetVoltageMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVoltageMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) GetHumidityMeasurements(*GetHumidityMeasurementsRequest, SensorsService_GetHumidityMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHumidityMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) GetTemperatureMeasurements(*GetTemperatureMeasurementsRequest, SensorsService_GetTemperatureMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTemperatureMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) mustEmbedUnimplementedSensorsServiceServer() {}

func RegisterSensorsServiceServer(s *grpc.Server, srv SensorsServiceServer) {
	s.RegisterService(&_SensorsService_serviceDesc, srv)
}

func _SensorsService_GetVoltageMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVoltageMeasurementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorsServiceServer).GetVoltageMeasurements(m, &sensorsServiceGetVoltageMeasurementsServer{stream})
}

type SensorsService_GetVoltageMeasurementsServer interface {
	Send(*GetVoltageMeasurementsResponse) error
	grpc.ServerStream
}

type sensorsServiceGetVoltageMeasurementsServer struct {
	grpc.ServerStream
}

func (x *sensorsServiceGetVoltageMeasurementsServer) Send(m *GetVoltageMeasurementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SensorsService_GetHumidityMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHumidityMeasurementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorsServiceServer).GetHumidityMeasurements(m, &sensorsServiceGetHumidityMeasurementsServer{stream})
}

type SensorsService_GetHumidityMeasurementsServer interface {
	Send(*GetHumidityMeasurementsResponse) error
	grpc.ServerStream
}

type sensorsServiceGetHumidityMeasurementsServer struct {
	grpc.ServerStream
}

func (x *sensorsServiceGetHumidityMeasurementsServer) Send(m *GetHumidityMeasurementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SensorsService_GetTemperatureMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTemperatureMeasurementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorsServiceServer).GetTemperatureMeasurements(m, &sensorsServiceGetTemperatureMeasurementsServer{stream})
}

type SensorsService_GetTemperatureMeasurementsServer interface {
	Send(*GetTemperatureMeasurementsResponse) error
	grpc.ServerStream
}

type sensorsServiceGetTemperatureMeasurementsServer struct {
	grpc.ServerStream
}

func (x *sensorsServiceGetTemperatureMeasurementsServer) Send(m *GetTemperatureMeasurementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SensorsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors_pb.SensorsService",
	HandlerType: (*SensorsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVoltageMeasurements",
			Handler:       _SensorsService_GetVoltageMeasurements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetHumidityMeasurements",
			Handler:       _SensorsService_GetHumidityMeasurements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTemperatureMeasurements",
			Handler:       _SensorsService_GetTemperatureMeasurements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pb/sensors/sensors.proto",
}

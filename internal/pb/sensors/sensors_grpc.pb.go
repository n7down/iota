// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sensors_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorServiceClient interface {
	GetVoltage(ctx context.Context, in *GetVoltageRequest, opts ...grpc.CallOption) (*GetVoltageResponse, error)
	GetHumidity(ctx context.Context, in *GetHumidityRequest, opts ...grpc.CallOption) (*GetHumidityResponse, error)
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) GetVoltage(ctx context.Context, in *GetVoltageRequest, opts ...grpc.CallOption) (*GetVoltageResponse, error) {
	out := new(GetVoltageResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorService/GetVoltage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) GetHumidity(ctx context.Context, in *GetHumidityRequest, opts ...grpc.CallOption) (*GetHumidityResponse, error) {
	out := new(GetHumidityResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorService/GetHumidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	out := new(GetTemperatureResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorService/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorServiceServer is the server API for SensorService service.
// All implementations must embed UnimplementedSensorServiceServer
// for forward compatibility
type SensorServiceServer interface {
	GetVoltage(context.Context, *GetVoltageRequest) (*GetVoltageResponse, error)
	GetHumidity(context.Context, *GetHumidityRequest) (*GetHumidityResponse, error)
	GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error)
	mustEmbedUnimplementedSensorServiceServer()
}

// UnimplementedSensorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) GetVoltage(context.Context, *GetVoltageRequest) (*GetVoltageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoltage not implemented")
}
func (*UnimplementedSensorServiceServer) GetHumidity(context.Context, *GetHumidityRequest) (*GetHumidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumidity not implemented")
}
func (*UnimplementedSensorServiceServer) GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (*UnimplementedSensorServiceServer) mustEmbedUnimplementedSensorServiceServer() {}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_GetVoltage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoltageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).GetVoltage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorService/GetVoltage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).GetVoltage(ctx, req.(*GetVoltageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_GetHumidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).GetHumidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorService/GetHumidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).GetHumidity(ctx, req.(*GetHumidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorService/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors_pb.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoltage",
			Handler:    _SensorService_GetVoltage_Handler,
		},
		{
			MethodName: "GetHumidity",
			Handler:    _SensorService_GetHumidity_Handler,
		},
		{
			MethodName: "GetTemperature",
			Handler:    _SensorService_GetTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/sensors/sensors.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sensors_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorsServiceClient is the client API for SensorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorsServiceClient interface {
	GetVoltageMeasurements(ctx context.Context, in *GetVoltageMeasurementsRequest, opts ...grpc.CallOption) (*GetVoltageMeasurementsResponse, error)
	GetHumidityMeasurements(ctx context.Context, in *GetHumidityMeasurementsRequest, opts ...grpc.CallOption) (*GetHumidityMeasurementsResponse, error)
	GetTemperatureMeasurements(ctx context.Context, in *GetTemperatureMeasurementsRequest, opts ...grpc.CallOption) (*GetTemperatureMeasurementsResponse, error)
}

type sensorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorsServiceClient(cc grpc.ClientConnInterface) SensorsServiceClient {
	return &sensorsServiceClient{cc}
}

func (c *sensorsServiceClient) GetVoltageMeasurements(ctx context.Context, in *GetVoltageMeasurementsRequest, opts ...grpc.CallOption) (*GetVoltageMeasurementsResponse, error) {
	out := new(GetVoltageMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorsService/GetVoltageMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorsServiceClient) GetHumidityMeasurements(ctx context.Context, in *GetHumidityMeasurementsRequest, opts ...grpc.CallOption) (*GetHumidityMeasurementsResponse, error) {
	out := new(GetHumidityMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorsService/GetHumidityMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorsServiceClient) GetTemperatureMeasurements(ctx context.Context, in *GetTemperatureMeasurementsRequest, opts ...grpc.CallOption) (*GetTemperatureMeasurementsResponse, error) {
	out := new(GetTemperatureMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/sensors_pb.SensorsService/GetTemperatureMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorsServiceServer is the server API for SensorsService service.
// All implementations must embed UnimplementedSensorsServiceServer
// for forward compatibility
type SensorsServiceServer interface {
	GetVoltageMeasurements(context.Context, *GetVoltageMeasurementsRequest) (*GetVoltageMeasurementsResponse, error)
	GetHumidityMeasurements(context.Context, *GetHumidityMeasurementsRequest) (*GetHumidityMeasurementsResponse, error)
	GetTemperatureMeasurements(context.Context, *GetTemperatureMeasurementsRequest) (*GetTemperatureMeasurementsResponse, error)
	mustEmbedUnimplementedSensorsServiceServer()
}

// UnimplementedSensorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorsServiceServer struct {
}

func (*UnimplementedSensorsServiceServer) GetVoltageMeasurements(context.Context, *GetVoltageMeasurementsRequest) (*GetVoltageMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoltageMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) GetHumidityMeasurements(context.Context, *GetHumidityMeasurementsRequest) (*GetHumidityMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumidityMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) GetTemperatureMeasurements(context.Context, *GetTemperatureMeasurementsRequest) (*GetTemperatureMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperatureMeasurements not implemented")
}
func (*UnimplementedSensorsServiceServer) mustEmbedUnimplementedSensorsServiceServer() {}

func RegisterSensorsServiceServer(s *grpc.Server, srv SensorsServiceServer) {
	s.RegisterService(&_SensorsService_serviceDesc, srv)
}

func _SensorsService_GetVoltageMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoltageMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetVoltageMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorsService/GetVoltageMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetVoltageMeasurements(ctx, req.(*GetVoltageMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_GetHumidityMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumidityMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetHumidityMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorsService/GetHumidityMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetHumidityMeasurements(ctx, req.(*GetHumidityMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_GetTemperatureMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetTemperatureMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors_pb.SensorsService/GetTemperatureMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetTemperatureMeasurements(ctx, req.(*GetTemperatureMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors_pb.SensorsService",
	HandlerType: (*SensorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoltageMeasurements",
			Handler:    _SensorsService_GetVoltageMeasurements_Handler,
		},
		{
			MethodName: "GetHumidityMeasurements",
			Handler:    _SensorsService_GetHumidityMeasurements_Handler,
		},
		{
			MethodName: "GetTemperatureMeasurements",
			Handler:    _SensorsService_GetTemperatureMeasurements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/sensors/sensors.proto",
}
